package org.jetbrains.research.testgenie.tools.llm.test

/**
 * Represents a test suite generated by LLM.
 *
 * @property imports The set of import statements in the test suite.
 * @property packageString The package string of the test suite.
 * @property testCases The list of test cases in the test suite.
 */
data class TestSuiteGeneratedByLLM(
    var imports: Set<String> = emptySet(),
    var packageString: String = "",
    var testCases: MutableList<TestCaseGeneratedByLLM> = mutableListOf(),
) {

    /**
     * Checks if the testCases collection is empty.
     *
     * @return `true` if the testCases collection is empty, `false` otherwise.
     */
    fun isEmpty(): Boolean {
        return testCases.isEmpty()
    }

    /**
     * Returns a string representation of this object.
     *
     * The returned string includes the package name, imports, test class declaration, and test cases.
     *
     * If the package name is not blank, it is added to the string representation with the prefix "package ".
     *
     * Each import in the imports list is added to the string representation followed by a new line.
     *
     * The test class declaration "public class GeneratedTest{" is included in the string representation.
     *
     * Each test case in the testCases list is appended to the string representation.
     *
     * The test class closing bracket "}" is included in the string representation.
     *
     * @return A string representing the test file.
     */
    override fun toString(): String {
        var testFullText = printUpperPart()

        // Add each test
        testCases.forEach { testCase -> testFullText += "$testCase\n" }

        // close the test class
        testFullText += "}"

        return testFullText
    }

    /**
     * Returns the full text of the test suite (excluding the expected exception).
     *
     * @return the full text of the test suite (excluding the expected exception) as a string.
     */
    fun toStringWithoutExpectedException() :String{
        var testFullText = printUpperPart()

        // Add each test (exclude expected exception)
        testCases.forEach { testCase -> testFullText += "${testCase.toStringWithoutExpectedException()}\n" }

        // close the test class
        testFullText += "}"

        return testFullText
    }

    /**
     * Returns the upper part of test suite (package name, imports, and test class name) as a string.
     *
     * @return the upper part of test suite (package name, imports, and test class name) as a string.
     */
    private fun printUpperPart(): String{
        var testText = ""

        // Add package
        if (packageString.isNotBlank()) {
            testText += "package $packageString;\n"
        }

        // add imports
        imports.forEach { importedElement ->
            testText += "$importedElement\n"
        }

        // open the test class
        testText += "public class GeneratedTest{\n\n"

        return testText
    }


    /**
     * Returns a printable package string.
     *
     * If the package string is empty or consists of only whitespace characters, an empty string is returned.
     * Otherwise, the package string followed by a period is returned.
     *
     * @return The printable package string.
     */
    fun getPrintablePackageString(): String {
        return when {
            packageString.isEmpty() || packageString.isBlank() -> ""
            else -> "$packageString."
        }
    }

    /**
     * Reformat method for TestSuiteGeneratedByLLM class.
     *
     * This method iterates over each test case in the testCases list and invokes the reformat method on each test case.
     * After that, it removes any empty test cases from the list.
     *
     * @return The current instance of TestSuiteGeneratedByLLM.
     */
    fun reformat(): TestSuiteGeneratedByLLM {
        testCases.forEach {
            it.reformat()
        }

        // remove empty test cases
        testCases.removeIf { testCase -> testCase.isEmpty() }

        return this
    }
}
